?tiff
getwd
getwd()
?readPng
install.packages("tiff")
library(tiff)
readTIFF(test)
test = c(c(1,A,5),c(1,B,3),c(2,A,1),c(3,B,4),)
test = c(c(1,'A',5),c(1,'B',3),c(2,'A',1),c(3,'B',4),)
test = c(c(1,'A',5),c(1,'B',3),c(2,'A',1),c(3,'B',4))
test
test = Matrix(c(1,'A',5,1,'B',3,2,'A',1,3,'B',4)
)
test = matrix(c(1,'A',5,1,'B',3,2,'A',1,3,'B',4))
test
test = matrix(c(1,'A',5,1,'B',3,2,'A',1,3,'B',4),nrow = 4)
test
test = matrix(c(1,'A',5,1,'B',3,2,'A',1,3,'B',4),nrow = 4,ncol=3)
test
test = matrix(c(1,'A',5,1,'B',3,2,'A',1,3,'B',4),ncol=3,nrow = 4)
test
test = matrix(c(1,2,1,3,'A','B','A','C',4,3,2,5),ncol=3,nrow = 4)
test
test[,sum(test[1] )]
test[1]
test[,1]
colnames(test) = c("X","Y","Z")
test
test[,sum(X )]
test[,sum(test$X )]
test[,sum(test$X ),by=test$Y]
test$X
test[,X]
test[,"X"]
test[,sum(test[,"X"] ),by=test$Y]
test[,"X"]
sum(test[,"X"])
sum(as.integer(test[,"X"]))
test[,sum(as.integer(test[,"X"])),by=test$Y]
test[,sum(as.integer(test[,"X"])),by=test[,"Y"]]
test[,sum(as.integer(test[,"X"]),by=test[,"Y"])]
test[,sum(as.integer(test[,"X"])),by=test[,"Y"]]
test[,sum(as.integer(test[,"X"])),by=test[,2]]
test[,sum(as.integer(test[,"X"])),by=test[2]]
test[,sum(as.integer(test[,"X"]),by=test[2])]
test[,sum(as.integer(test[,"X"])),by="Y"]
install.packages("data.table")
library(data.table)
data.table(test)
test=data.table(test)
test[,sum(as.integer(test[,"X"])),by="Y"]
test[,sum(as.integer(test[,"X"])),by=test[,"Y"]]
test[,sum(as.integer(test[,"X"])),by="Y"]
test
test[,sum(as.integer(test[,"X"])),by="Z"]
test[,sum(as.integer(test[,"Z"])),by="Y"]
test[,sum(as.integer(test[,"Z"])),by=as.character("Y")]
test[,sum(as.integer(test[,"Z"])),by="Y"]
test[,sum(as.integer(test[,"Z"])),by=test[1]]
test[,sum(as.integer(test[,"Z"])),by=test[,1]]
test[,sum(as.integer(test[,"Z"])),by="Y"]
test[,sum(as.integer(test[,"Z"]),by="Y")]
test[,sum(as.integer(test[,"Z"])),by="Y"]
test[,lapply(sum,as.integer(test[,"Z"])),by="Y"]
test[,lapply(as.integer(test[,"Z"]),sum),by="Y"]
test[,sum(as.integer(test[,"Z"])),by="Y"]
test[,sum(test[,"Z"]),by="Y"]
test[,sum(as.integer(test[,"Z"])),by="Y"]
test[,sum=sum(as.integer(test[,"Z"])),by="Y"]
test[,sum1=sum(as.integer(test[,"Z"])),by="Y"]
test[,sum(as.integer(test[,"Z"])),by="Y"]
test[,sum(as.integer(test[,"Z"])),by=as.numeric("Y")]
test[,sum(as.integer(test[,"Z"])),by="Y"]
test$Y
factors(test$Y)
factor(test$Y)
f=factor(test$Y)
test[,sum(as.integer(test[,"Z"])),by=f]
shiny::runApp('C:/Users/nghazanf/Desktop/Nasim/R scripts/Shiny/HRMcharts-LINEChartDouble - Copy')
read.csv("C:\Users\nghazanf\Downloads\4-abeh-1427131297 (1).csv")
read.csv("C:\\Users\\nghazanf\\Downloads\\4-abeh-1427131297 (1).csv")
data <-read.csv("C:\\Users\\nghazanf\\Downloads\\4-abeh-1427131297 (1).csv")
plotNames <<- levels(factor(data, levels = unique(data$name)))
data <<- fillDataFrame(BuildDataFrame())
fillDataFrame <- function(df) {
for (plot in plotNames) {
## fill bare ground data
df["Bare Ground%", plot] = sum(subset(data, subset = (name == plot),
select = stick_segment_0:stick_segment_4) == "Bare")
df["Veg cover%", plot] = sum(subset(data, subset = (name == plot),
select = stick_segment_0:stick_segment_4) != "Bare")
## fill species data
df["Species 1 density (perennial grass plants per m2)", plot] = sum(subset(data,
subset = (name == plot))$species_1_density)/20
df["Species 2 density (Acacia reficiens plants per m2)", plot] = sum(subset(data,
subset = (name == plot))$species_2_density)/20
## fill gap data
df["Canopy gap%", plot] = as.numeric( nrow(subset(data, subset = (as.logical(canopy_gap) &
name == plot)))/20 * 100)
df["Basal gap %", plot] = as.numeric(nrow(subset(data, subset = (as.logical(basal_gap) &
name == plot)))/20 * 100)
## fill height class values
for (class in hClasses) {
df[class, plot] = nrow(subset(data, subset = (canopy_height ==
class & name == plot)))/20 * 100
}
}
return(df)
}
data2 <<- fillDataFrame(BuildDataFrame())
BuildDataFrame <- function() {
## count of plots
plotCount <- length(plotNames)
## build new data frame
formattedData <- data.frame(matrix(ncol = plotCount, nrow = 15))
## prepare list of properties
propertyList = c("Bare Ground%", "Veg cover%", "", "Canopy gap%", "Basal gap %",
" ", "Species 1 density (perennial grass plants per m2)", "Species 2 density (Acacia reficiens plants per m2)",
"Height.class", "<10cm", "10-50cm", "50cm-1m", "1-2m", "2-3m",
">3m")
# set the property names
row.names(formattedData) <- propertyList
# set plotnames to columns
colnames(formattedData)[1:plotCount] <- plotNames
return(formattedData)
}
data2 <<- fillDataFrame(BuildDataFrame())
hClasses <<- c("<10cm", "10-50cm", "50cm-1m", "1-2m", "2-3m", ">3m")
data2 <<- fillDataFrame(BuildDataFrame())
View(data2)
View(data)
data <-read.csv("C:\\Users\\nghazanf\\Downloads\\4-abeh-1427131297 (1).csv")
plotNames <<- levels(factor(data, levels = unique(data$name)))
data <-read.csv("C:\\Users\\nghazanf\\Downloads\\4-abeh-1427131297 (1).csv")
plotNames <<- levels(factor(data, levels = unique(data$name)))
View(data)
shiny::runApp('C:/Users/nghazanf/Desktop/Nasim/R scripts/Shiny/HRMcharts-LINEChartDouble-Api - Copy')
plotCount <- length(plotNames)
formattedData <- data.frame(matrix(ncol = plotCount, nrow = 15))
View(formattedData)
propertyList = c("Bare Ground%", "Veg cover%", "", "Canopy gap%", "Basal gap %",
" ", "Species 1 density (perennial grass plants per m2)", "Species 2 density (Acacia reficiens plants per m2)",
"Height.class", "<10cm", "10-50cm", "50cm-1m", "1-2m", "2-3m",
">3m")
row.names(formattedData) <- propertyList
View(formattedData)
colnames(formattedData)[1:plotCount] <- plotNames
View(formattedData)
View(formattedData)
formattedData
df<-formattedData
data2 <<- fillDataFrame(BuildDataFrame())
View(data2)
View(data)
data <-read.csv("C:\\Users\\nghazanf\\Downloads\\4-abeh-1427131297 (1).csv")
plotNames <<- levels(factor(data, levels = unique(data$name)))
shiny::runApp('C:/Users/nghazanf/Desktop/Nasim/R scripts/Shiny/HRMcharts-LINEChartDouble-Api - Copy')
data <-read.csv("C:\\Users\\nghazanf\\Downloads\\4-abeh-1427131297 (1).csv")
plotNames <<- levels(factor(data, levels = unique(data$name)))
plotCount <- length(plotNames)
formattedData <- data.frame(matrix(ncol = plotCount, nrow = 15))
View(formattedData)
propertyList = c("Bare Ground%", "Veg cover%", "", "Canopy gap%", "Basal gap %",
" ", "Species 1 density (perennial grass plants per m2)", "Species 2 density (Acacia reficiens plants per m2)",
"Height.class", "<10cm", "10-50cm", "50cm-1m", "1-2m", "2-3m",
">3m")
# set the property names
row.names(formattedData) <- propertyList
View(formattedData)
colnames(formattedData)[1:plotCount] <- plotNames
View(formattedData)
## this method buils the structure of the data
BuildDataFrame <- function() {
## count of plots
plotCount <- length(plotNames)
## build new data frame
formattedData <- data.frame(matrix(ncol = plotCount, nrow = 15))
## prepare list of properties
propertyList = c("Bare Ground%", "Veg cover%", "", "Canopy gap%", "Basal gap %",
" ", "Species 1 density (perennial grass plants per m2)", "Species 2 density (Acacia reficiens plants per m2)",
"Height.class", "<10cm", "10-50cm", "50cm-1m", "1-2m", "2-3m",
">3m","" , "Total Cover")
# set the property names
row.names(formattedData) <- propertyList
# set plotnames to columns
colnames(formattedData)[1:plotCount] <- plotNames
return(formattedData)
}
data <-read.csv("C:\\Users\\nghazanf\\Downloads\\4-abeh-1427131297 (1).csv")
plotNames <<- levels(factor(data, levels = unique(data$name)))
data2 <<- fillDataFrame(BuildDataFrame())
BuildDataFrame()
BuildDataFrame <- function() {
## count of plots
plotCount <- length(plotNames)
## build new data frame
formattedData <- data.frame(matrix(ncol = plotCount, nrow = 17))
## prepare list of properties
propertyList = c("Bare Ground%", "Veg cover%", "", "Canopy gap%", "Basal gap %",
" ", "Species 1 density (perennial grass plants per m2)", "Species 2 density (Acacia reficiens plants per m2)",
"Height.class", "<10cm", "10-50cm", "50cm-1m", "1-2m", "2-3m",
">3m","" , "Total Cover")
# set the property names
row.names(formattedData) <- propertyList
# set plotnames to columns
colnames(formattedData)[1:plotCount] <- plotNames
return(formattedData)
}
BuildDataFrame()
plotCount <- length(plotNames)
formattedData <- data.frame(matrix(ncol = plotCount, nrow = 17))
propertyList = c("Bare Ground%", "Veg cover%", "", "Canopy gap%", "Basal gap %",
" ", "Species 1 density (perennial grass plants per m2)", "Species 2 density (Acacia reficiens plants per m2)",
"Height.class", "<10cm", "10-50cm", "50cm-1m", "1-2m", "2-3m",
">3m","" , "Total Cover")
# set the property names
row.names(formattedData) <- propertyList
length(propertyList)
plotCount <- length(plotNames)
## build new data frame
formattedData <- data.frame(matrix(ncol = plotCount, nrow = 16))
## prepare list of properties
propertyList = c("Bare Ground%", "Veg cover%", "", "Canopy gap%", "Basal gap %",
" ", "Species 1 density (perennial grass plants per m2)", "Species 2 density (Acacia reficiens plants per m2)",
"Height.class", "<10cm", "10-50cm", "50cm-1m", "1-2m", "2-3m",
">3m" , "Total Cover")
# set the property names
row.names(formattedData) <- propertyList
# set plotnames to columns
colnames(formattedData)[1:plotCount] <- plotNames
## this method buils the structure of the data
BuildDataFrame <- function() {
## count of plots
plotCount <- length(plotNames)
## build new data frame
formattedData <- data.frame(matrix(ncol = plotCount, nrow = 16))
## prepare list of properties
propertyList = c("Bare Ground%", "Veg cover%", "", "Canopy gap%", "Basal gap %",
" ", "Species 1 density (perennial grass plants per m2)", "Species 2 density (Acacia reficiens plants per m2)",
"Height.class", "<10cm", "10-50cm", "50cm-1m", "1-2m", "2-3m",
">3m" , "Total Cover")
# set the property names
row.names(formattedData) <- propertyList
# set plotnames to columns
colnames(formattedData)[1:plotCount] <- plotNames
return(formattedData)
}
View(data2)
data2 <<- fillDataFrame(BuildDataFrame())
View(data2)
data
data[1,]
data[,1]
data[,"name"]
data$trees_total
View(data2)
data2 <<- fillDataFrame(BuildDataFrame())
View(data2)
shiny::runApp('C:/Users/nghazanf/Desktop/Nasim/R scripts/Shiny/HRMcharts-LINEChartDouble-Api - Copy')
subset(data, subset = (name == "test.660"))
subset(data2, subset = (name == "test.660"))
View(data2)
View(data)
View(data)
View(data2)
View(formattedData)
data <-read.csv("C:\\Users\\nghazanf\\Downloads\\4-abeh-1427131297 (1).csv")
plotNames <<- levels(factor(data, levels = unique(data$name)))
data2 <<- fillDataFrame(BuildDataFrame())
View(data2)
View(data)
subset(data, subset = (name == "test.660"))
subset(data, subset = (name == "test.660"),select = "annuals_total")
subset(data, subset = (name == "test.660"),select = "trees_total")
sum(subset(data, subset = (name == "test.660"),select = "trees_total"))
sum(subset(data, subset = (name == "test.660"),select = "bare_total":"rock_total"))
subset(data, subset = (name == "test.660"),select = "bare_total":"rock_total")
subset(data, subset = (name == "test.660"),select = bare_total:rock_total)
sum(subset(data, subset = (name == "test.660"),select = bare_total:rock_total))
## this method buils the structure of the data
BuildDataFrame <- function() {
## count of plots
plotCount <- length(plotNames)
## build new data frame
formattedData <- data.frame(matrix(ncol = plotCount, nrow = 17))
## prepare list of properties
propertyList = c("Bare Ground%", "Veg cover%", "", "Canopy gap%", "Basal gap %",
" ", "Species 1 density (perennial grass plants per m2)", "Species 2 density (Acacia reficiens plants per m2)",
"Height.class", "<10cm", "10-50cm", "50cm-1m", "1-2m", "2-3m",
">3m" , "Plant Cover/Composition","Tree total %")
# set the property names
row.names(formattedData) <- propertyList
# set plotnames to columns
colnames(formattedData)[1:plotCount] <- plotNames
return(formattedData)
}
## This method fills the data into data frame
fillDataFrame <- function(df) {
for (plot in plotNames) {
## fill bare ground data
df["Bare Ground%", plot] = sum(subset(data, subset = (name == plot),
select = stick_segment_0:stick_segment_4) == "Bare")
df["Veg cover%", plot] = sum(subset(data, subset = (name == plot),
select = stick_segment_0:stick_segment_4) != "Bare")
## fill species data
df["Species 1 density (perennial grass plants per m2)", plot] = sum(subset(data,
subset = (name == plot))$species_1_density)/20
df["Species 2 density (Acacia reficiens plants per m2)", plot] = sum(subset(data,
subset = (name == plot))$species_2_density)/20
## fill gap data
df["Canopy gap%", plot] = as.numeric( nrow(subset(data, subset = (as.logical(canopy_gap) &
name == plot)))/20 * 100)
df["Basal gap %", plot] = as.numeric(nrow(subset(data, subset = (as.logical(basal_gap) &
name == plot)))/20 * 100)
## fill height class values
for (class in hClasses) {
df[class, plot] = nrow(subset(data, subset = (canopy_height ==
class & name == plot)))/20 * 100
}
##formula 4
sumPlantCover = sum(subset(data, subset = (name == plot),select = bare_total:rock_total))
df["Tree total %", plot]= sum(subset(data, subset = (name == plot),select = trees_total))
}
return(df)
}
data <-read.csv("C:\\Users\\nghazanf\\Downloads\\4-abeh-1427131297 (1).csv")
plotNames <<- levels(factor(data, levels = unique(data$name)))
data2 <<- fillDataFrame(BuildDataFrame())
View(data2)
fillDataFrame <- function(df) {
for (plot in plotNames) {
## fill bare ground data
df["Bare Ground%", plot] = sum(subset(data, subset = (name == plot),
select = stick_segment_0:stick_segment_4) == "Bare")
df["Veg cover%", plot] = sum(subset(data, subset = (name == plot),
select = stick_segment_0:stick_segment_4) != "Bare")
## fill species data
df["Species 1 density (perennial grass plants per m2)", plot] = sum(subset(data,
subset = (name == plot))$species_1_density)/20
df["Species 2 density (Acacia reficiens plants per m2)", plot] = sum(subset(data,
subset = (name == plot))$species_2_density)/20
## fill gap data
df["Canopy gap%", plot] = as.numeric( nrow(subset(data, subset = (as.logical(canopy_gap) &
name == plot)))/20 * 100)
df["Basal gap %", plot] = as.numeric(nrow(subset(data, subset = (as.logical(basal_gap) &
name == plot)))/20 * 100)
## fill height class values
for (class in hClasses) {
df[class, plot] = nrow(subset(data, subset = (canopy_height ==
class & name == plot)))/20 * 100
}
##formula 4
sumPlantCover = sum(subset(data, subset = (name == plot),select = bare_total:rock_total))
df["Tree total %", plot]= sum(subset(data, subset = (name == plot),select = trees_total))/sumPlantCover * 100
}
return(df)
}
data <-read.csv("C:\\Users\\nghazanf\\Downloads\\4-abeh-1427131297 (1).csv")
plotNames <<- levels(factor(data, levels = unique(data$name)))
data2 <<- fillDataFrame(BuildDataFrame())
View(data2)
19/122
fillDataFrame <- function(df) {
for (plot in plotNames) {
## fill bare ground data
df["Bare Ground%", plot] = sum(subset(data, subset = (name == plot),
select = stick_segment_0:stick_segment_4) == "Bare")
df["Veg cover%", plot] = sum(subset(data, subset = (name == plot),
select = stick_segment_0:stick_segment_4) != "Bare")
## fill species data
df["Species 1 density (perennial grass plants per m2)", plot] = sum(subset(data,
subset = (name == plot))$species_1_density)/20
df["Species 2 density (Acacia reficiens plants per m2)", plot] = sum(subset(data,
subset = (name == plot))$species_2_density)/20
## fill gap data
df["Canopy gap%", plot] = as.numeric( nrow(subset(data, subset = (as.logical(canopy_gap) &
name == plot)))/20 * 100)
df["Basal gap %", plot] = as.numeric(nrow(subset(data, subset = (as.logical(basal_gap) &
name == plot)))/20 * 100)
## fill height class values
for (class in hClasses) {
df[class, plot] = nrow(subset(data, subset = (canopy_height ==
class & name == plot)))/20 * 100
}
##formula 4
sumPlantCover = sum(subset(data, subset = (name == plot),select = bare_total:rock_total))
df["Tree total %", plot]= sum(subset(data, subset = (name == plot),select = trees_total))/sumPlantCover * 100
df["shrubs_total%", plot]= sum(subset(data, subset = (name == plot),select = shrubs_total))/sumPlantCover * 100
df["sub_shrubs_total %", plot]= sum(subset(data, subset = (name == plot),select = sub_shrubs_total))/sumPlantCover * 100
df["perennial_grasses_total %", plot]= sum(subset(data, subset = (name == plot),select = perennial_grasses_total))/sumPlantCover * 100
df["annuals_total%", plot]= sum(subset(data, subset = (name == plot),select = annuals_total))/sumPlantCover * 100
}
return(df)
}
data <-read.csv("C:\\Users\\nghazanf\\Downloads\\4-abeh-1427131297 (1).csv")
plotNames <<- levels(factor(data, levels = unique(data$name)))
data2 <<- fillDataFrame(BuildDataFrame())
View(data2)
library(soilDB)
library(sharpshootR)
source('C:/Users/nghazanf/Desktop/Nasim/R scripts/sampleAQP.R')
shiny::runApp('C:/Users/nghazanf/Desktop/Nasim/R scripts/Shiny/LandPKSplotsMap')
shiny::runApp('C:/Users/nghazanf/Desktop/Nasim/R scripts/Shiny/RHMcharts-LINEChartDouble-Api - Copy')
shiny::runApp('C:/Users/nghazanf/Desktop/Nasim/R scripts/Shiny/RHMcharts-LINEChartDouble-Api - 2')
x <- c(1,2.3,2,3,4,8,12,43,-4,-1)
r <- sd(x)
r
x <- c(1,2.3,2,3,4,8,12,43,-4,-1,NA)
sd(x)
sd(x,na.rm = false)
sd(x,na.rm = FALSE)
x <- c(1,2.3,2,3,4,8,12,43,-4,-1,0)
sd(x)
f=c(1,2,4,5)
s=c(1,2,3,4,5)
merge(f,s)
merge(x=f,y=s,all.x=TRUE )
merge(x=f,y=s,by="a"all.x=TRUE )
merge(x=f,y=s,by="a",all.x=TRUE )
colnames(f)
colnames(f)<-s
M <- gvisMotionChart(Fruits, "Fruit", "Year")
library(googleVis)
M <- gvisMotionChart(Fruits, "Fruit", "Year")
plot(M)
M$html$chart
getwd()
cat(M$html$chart, file="tmp.html")
fruits
Fruits
install.packages("shinyga")
install.packages("shiny")
shiny::runApp('C:/Users/nghazanf/Desktop/Nasim/LandPKSDashboard/PlotStats')
shiny::runApp('GitHub/Jornada/AdminDashboard/PlotStats')
View(json_data)
json_data
json_data$modifiedDate
Sys.Date()
Sys.Date()-120
Sys.Date()-60
Sys.Date()-40
Sys.Date()-35
start <- Sys.Date()-35
end <- Sys.Date()
json_data$modifiedDate <to
json_data$modifiedDate <end
json_data$modifiedDate <end & json_data$modifiedDate >start
json_data[] json_data$modifiedDate <end & json_data$modifiedDate >start,]
json_data[json_data$modifiedDate <end & json_data$modifiedDate >start,]
subj<-json_data[json_data$modifiedDate <end & json_data$modifiedDate >start,]
View(subj)
shiny::runApp('GitHub/Jornada/AdminDashboard/PlotStats')
help(paste)
json_data$modifiedDate
min(json_data$modifiedDate)
max(json_data$modifiedDate)
shiny::runApp('GitHub/Jornada/AdminDashboard/PlotStats')
shiny::runApp('GitHub/Jornada/AdminDashboard/PlotStats')
shiny::runApp('GitHub/Jornada/AdminDashboard/PlotStats')
shiny::runApp('GitHub/Jornada/AdminDashboard/PlotStats')
minDate
Date(minDate)
as.Date.date(minDate)
class(minDate)
as.Date(minDate, "%m/%d/%Y")
as.Date(minDate, "%m-%d-%Y")
strftime(minDate)
dd<-strftime(minDate)
dd
class(dd)
as.Date(minDate, "%Y-%m-%d")
minDate
shiny::runApp('GitHub/Jornada/AdminDashboard/PlotStats')
minDate
as.Date(minDate, "%Y-%m-%d")
shiny::runApp('GitHub/Jornada/AdminDashboard/PlotStats')
aggregate(json_data$value , list(user = json_data$recorderName), sum)
tmp_agg_data <- aggregate(json_data$value , list(user = json_data$recorderName), sum)
tmp_agg_data <- aggregate(json_data$value , list(user = json_data$recorderName), sum)
min(tmp_agg_data$x)
max(tmp_agg_data$x)
shiny::runApp('GitHub/Jornada/AdminDashboard/PlotStats')
shiny::runApp('GitHub/Jornada/AdminDashboard/PlotStats')
92-65
92%65
92 % 65
92 mod 65
27+65
92 - 26
shiny::runApp('C:/Users/nghazanf/Desktop/Nasim/R scripts/Shiny/RHMcharts-final')
shiny::runApp('GitHub/Jornada/AdminDashboard/PlotStats')
View(json_data)
shiny::runApp('GitHub/Jornada/AdminDashboard/PlotStats')
11100
as.integer(11100)
21|28
21||28
21^28
bitwOr(21,28)
7%3
7 mod 3
setwd("~/GitHub/Jornada/AdminDashboard/PlotStats")
library("shinyapps", lib.loc="~/R/win-library/3.2")
deployApp()
accounts()
removeAccount()
removeAccount(nasim)
removeAccount(nasim,NULL)
accounts()
removeAccount("nasim")
accounts()
deployApp()
